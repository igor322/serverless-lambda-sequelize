service: web-api
frameworkVersion: '2'

custom:
  prod: ${file(prod.json)}
  dev: ${file(dev.json)}

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: sa-east-1
  timeout: 30
  stage: ${opt:stage, 'dev'}
  environment: 
    NODE_ENV: ${self:custom.${self:provider.stage}.NODE_ENV}
    DB_NAME: ${self:custom.${self:provider.stage}.DB_NAME}
    DB_USER: ${self:custom.${self:provider.stage}.DB_USER}
    DB_PASSWORD: ${self:custom.${self:provider.stage}.DB_PASSWORD}
    DB_HOST: ${self:custom.${self:provider.stage}.DB_HOST}
    DB_PORT: ${self:custom.${self:provider.stage}.DB_PORT}
    DB_DIALECT: ${self:custom.${self:provider.stage}.DB_DIALECT}
  vpc:
    securityGroupIds:
      - ${self:custom.${self:provider.stage}.SECURITY_GROUP_ID}
    subnetIds:
      - ${self:custom.${self:provider.stage}.SUBNET1_ID}
      - ${self:custom.${self:provider.stage}.SUBNET2_ID}
      - ${self:custom.${self:provider.stage}.SUBNET3_ID}

functions:
  healthCheck:
    handler: api/handler.healthCheck
    events:
      - http:
          path: /
          method: get
          cors: true
  create:
    handler: api/handler.create
    events:
      - http:
          path: api
          method: post
          cors: true
  getOne:
    handler: api/handler.getOne
    events:
      - http:
          path: api/{id}
          method: get
          cors: true
  getAll:
    handler: api/handler.getAll
    events:
     - http:
         path: api
         method: get
         cors: true
  update:
    handler: api/handler.update
    events:
     - http:
         path: api/{id}
         method: put
         cors: true
  destroy:
    handler: api/handler.destroy
    events:
     - http:
         path: api/{id}
         method: delete
         cors: true

plugins:
  - serverless-offline